diff --git a/src/cxa_guard_impl.h b/src/cxa_guard_impl.h
index 191a589..7a83d8c 100644
--- a/src/cxa_guard_impl.h
+++ b/src/cxa_guard_impl.h
@@ -283,6 +283,13 @@ struct LibcppCondVar;
 #ifndef _LIBCXXABI_HAS_NO_THREADS
 struct LibcppMutex {
   LibcppMutex() = default;
+
+#if _LIBCPP_HAS_THREAD_API_WIN32
+  void init() {
+    std::__libcpp_mutex_init(&mutex);
+  }
+#endif
+
   LibcppMutex(LibcppMutex const&) = delete;
   LibcppMutex& operator=(LibcppMutex const&) = delete;
 
@@ -396,6 +403,12 @@ private:
     LockGuard& operator=(LockGuard const&) = delete;
 
     explicit LockGuard(const char* calling_func) : calling_func_(calling_func) {
+#if _LIBCPP_HAS_THREAD_API_WIN32
+      static std::__libcpp_exec_once_flag init_mutex_flag = _LIBCPP_EXEC_ONCE_INITIALIZER;
+      std::__libcpp_execute_once(&init_mutex_flag, []() {
+        global_mutex.init();
+      });
+#endif
       if (global_mutex.lock())
         ABORT_WITH_MESSAGE("%s failed to acquire mutex", calling_func_);
     }
diff --git a/src/fallback_malloc.cpp b/src/fallback_malloc.cpp
index 75788fe..efa0dd5 100644
--- a/src/fallback_malloc.cpp
+++ b/src/fallback_malloc.cpp
@@ -44,6 +44,12 @@ class mutexor {
 public:
 #ifndef _LIBCXXABI_HAS_NO_THREADS
   mutexor(std::__libcpp_mutex_t* m) : mtx_(m) {
+#if _LIBCPP_HAS_THREAD_API_WIN32
+    static std::__libcpp_exec_once_flag init_mutex_flag = _LIBCPP_EXEC_ONCE_INITIALIZER;
+    std::__libcpp_execute_once(&init_mutex_flag, []() {
+      std::__libcpp_mutex_init(&heap_mutex);
+    });
+#endif
     std::__libcpp_mutex_lock(mtx_);
   }
   ~mutexor() { std::__libcpp_mutex_unlock(mtx_); }
